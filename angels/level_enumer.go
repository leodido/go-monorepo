// Code generated by "enumer -type=Level"; DO NOT EDIT

package angels

import (
	"fmt"
)

const _LevelName = "SerafinoCherubinoTroniDominazioneVirtùPotestàPrincipatoArcangeloAngelo"

var _LevelIndex = [...]uint8{0, 8, 17, 22, 33, 39, 47, 57, 66, 72}

func (i Level) String() string {
	if i < 0 || i >= Level(len(_LevelIndex)-1) {
		return fmt.Sprintf("Level(%d)", i)
	}
	return _LevelName[_LevelIndex[i]:_LevelIndex[i+1]]
}

var _LevelValues = []Level{0, 1, 2, 3, 4, 5, 6, 7, 8}

var _LevelNameToValueMap = map[string]Level{
	_LevelName[0:8]:   0,
	_LevelName[8:17]:  1,
	_LevelName[17:22]: 2,
	_LevelName[22:33]: 3,
	_LevelName[33:39]: 4,
	_LevelName[39:47]: 5,
	_LevelName[47:57]: 6,
	_LevelName[57:66]: 7,
	_LevelName[66:72]: 8,
}

// LevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LevelString(s string) (Level, error) {
	if val, ok := _LevelNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Level values", s)
}

// LevelValues returns all values of the enum
func LevelValues() []Level {
	return _LevelValues
}

// IsALevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Level) IsALevel() bool {
	for _, v := range _LevelValues {
		if i == v {
			return true
		}
	}
	return false
}
